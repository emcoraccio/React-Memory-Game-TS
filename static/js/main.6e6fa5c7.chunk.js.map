{"version":3,"sources":["components/CardContainer/index.tsx","components/Message/index.tsx","components/Score/index.tsx","components/Header/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardContainer","clickImage","className","array","i","length","j","Math","floor","random","shuffleImgs","animals","map","animal","key","id","src","image","alt","onClick","Message","feedback","Score","score","topScore","Header","App","state","clicked","changeScore","set","setState","imageId","indexOf","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"whCA+CeA,MAjCf,YAA+C,IAAtBC,EAAqB,EAArBA,WAYvB,OAEE,yBAAKC,UAAU,OAVC,SAACC,GACjB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,MAUxCI,CAAYC,GACZA,EAAQC,KAAI,SAAAC,GAAM,OAEjB,yBAAKX,UAAU,wBAAwBY,IAAKD,EAAOE,IACjD,yBAAKb,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKc,IAAKH,EAAOI,MAAOC,IAAKL,EAAOK,IAAKC,QAAS,WAAQlB,EAAWY,EAAOE,eCf3EK,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,SAEjB,OACE,oCACE,yBAAKnB,UAAU,OACb,wBAAIA,UAAU,wBAAd,sBACA,wBAAIA,UAAU,kBAAkBmB,MCczBC,MAnBf,YAA4C,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAEtB,OACE,oCACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,8BACb,sCAAYqB,IAEd,yBAAKrB,UAAU,oBACb,0CAAgBsB,OCMXC,MAZf,YAAuD,IAArCF,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAUH,EAAmB,EAAnBA,SAEjC,OACE,oCACE,kBAAC,EAAD,CAASA,SAAUA,IACnB,kBAAC,EAAD,CAAOE,MAAOA,EAAOC,SAAUA,MC+DtBE,E,2MAvEbC,MAAQ,CACNJ,MAAO,EACPC,SAAU,EACVI,QAAS,CAAC,GACVP,SAAU,sE,EAGZQ,YAAc,SAACC,GAEb,GAAY,aAARA,EACF,GAAI,EAAKH,MAAMJ,QAAU,EAAKI,MAAMH,UAAiC,KAArB,EAAKG,MAAMJ,MAAc,CACvE,IAAMF,EAAgC,KAArB,EAAKM,MAAMJ,MAAe,WAAa,WAClDA,EAA6B,KAArB,EAAKI,MAAMJ,MAAe,EAAI,EAAKI,MAAMJ,MAAQ,EAC/D,EAAKQ,SAAS,CACZR,QACAC,SAAU,EAAKG,MAAMJ,MAAQ,EAC7BF,kBAIF,EAAKU,SAAS,CACZR,MAAO,EAAKI,MAAMJ,MAAQ,EAC1BF,SAAU,iBAIC,UAARS,GACP,EAAKC,SAAS,CACZR,MAAO,EACPF,SAAU,e,EAMhBpB,WAAa,SAAC+B,GACZ,IAA6C,IAAzC,EAAKL,MAAMC,QAAQK,QAAQD,GAAiB,CAE9C,IAAMJ,EAAwC,KAA9B,EAAKD,MAAMC,QAAQvB,OAAgB,CAAC,GAApC,sBAA6C,EAAKsB,MAAMC,SAAxD,CAAiEI,IAEjF,EAAKD,SAAS,CACZH,YAEF,EAAKC,YAAY,iBAKjB,EAAKA,YAAY,SACjB,EAAKE,SAAS,CACZH,QAAS,CAAC,M,wEAUd,OACE,yBAAK1B,UAAU,aACb,kBAAC,EAAWgC,KAAKP,OACjB,kBAAC,EAAD,CAAe1B,WAAYiC,KAAKjC,kB,GAjEtBkC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e6fa5c7.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css'\nimport animals from '../../animals.json';\n\ninterface Props {\n  clickImage: (imageId: number) => void\n}\n\ninterface Animals {\n  id: number,\n  image: string,\n  alt: string\n}\n\nfunction CardContainer({ clickImage }: Props) {\n\n\n\n  let shuffleImgs = (array: Animals[]) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n\n  return (\n\n    <div className=\"row\">\n      {shuffleImgs(animals)}\n      {animals.map(animal => (\n\n        <div className=\"col s6 m4 l3 card-col\" key={animal.id}>\n          <div className=\"card hoverable\">\n            <div className=\"card-image\">\n              <img src={animal.image} alt={animal.alt} onClick={() => { clickImage(animal.id) }} />\n            </div>\n          </div>\n        </div>\n      ))}\n\n    </div>\n\n  );\n\n}\n\nexport default CardContainer","import React from 'react';\n\ninterface Props {\n  feedback: string\n}\n\nfunction Message({ feedback }: Props) {\n\n  return (\n    <>\n      <div className=\"row\">\n        <h1 className=\"title col s12 center\">Animal Memory Game</h1>\n        <h4 className=\"col s12 center\">{feedback}</h4>\n      </div>\n    </>\n  );\n\n};\n\n\nexport default Message;","import React from 'react';\n\ninterface Props {\n  score: number,\n  topScore: number\n}\n\nfunction Score({ score, topScore }: Props) {\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col s6 m3 offset-m3 center\">\n          <h5>Score: {score}</h5>\n        </div>\n        <div className=\"col s6 m3 center\">\n          <h5>Top Score: {topScore}</h5>\n        </div>\n        \n      </div>\n    </>\n  );\n\n};\n\n\nexport default Score;","import React from 'react';\nimport Message from '../Message';\nimport Score from '../Score';\n\ninterface Props {\n  score: number,\n  topScore: number,\n  feedback: string\n}\n\nfunction Header({ score, topScore, feedback }: Props) {\n\n  return (\n    <>\n      <Message feedback={feedback}/>\n      <Score score={score} topScore={topScore}/>\n    </>\n  );\n\n}\n\n\nexport default Header","import React, { Component } from 'react';\nimport './App.css';\nimport CardContainer from './components/CardContainer';\nimport Header from './components/Header';\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: [0],\n    feedback: \"Click a picture to start. Don't click any pictures more than once.\"\n  };\n\n  changeScore = (set: string) => {\n\n    if (set === \"increase\") {\n      if (this.state.score === this.state.topScore || this.state.score === 11) {\n        const feedback = this.state.score === 11 ? \"You Win!\" : \"Correct!\";\n        const score = this.state.score === 11 ? 0 : this.state.score + 1;\n        this.setState({\n          score,\n          topScore: this.state.score + 1,\n          feedback\n        });\n      }\n      else {\n        this.setState({\n          score: this.state.score + 1,\n          feedback: \"Correct!\"\n        });\n      };\n    }\n    else if (set === \"reset\") {\n      this.setState({\n        score: 0,\n        feedback: \"Game Over\"\n      });\n    };\n  };\n\n\n  clickImage = (imageId: number) => {\n    if (this.state.clicked.indexOf(imageId) === -1) {\n\n      const clicked = this.state.clicked.length === 11 ? [0] : [...this.state.clicked, imageId]\n\n      this.setState({\n        clicked\n      });\n      this.changeScore(\"increase\");\n\n    }\n    else {\n\n      this.changeScore(\"reset\");\n      this.setState({\n        clicked: [0]\n      });\n\n    };\n\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <Header {...this.state} />\n        <CardContainer clickImage={this.clickImage}/>\n      </div>\n    );\n\n  }\n\n};\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}